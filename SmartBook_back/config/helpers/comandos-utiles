# Comando para correr en desarrollo:
NODE_ENV=development npm start

# Comando para correr en producción:
NODE_ENV=production npm run build
NODE_ENV=production node server.js




##Pasos: Ejecutar en desarrollo y producción desde archivos independientes:

    #Para desarrollo:
        --Iniciar el backend: Este comando iniciará el servidor con nodemon y cargará el archivo .env.development.
            # Instalar dependencias
                npm install

            # Iniciar el backend en desarrollo
                npm run dev

        --Iniciar el frontend: Esto iniciará el servidor de desarrollo de Angular en el puerto 4200 y usará el archivo .env.development.
            # Instalar dependencias
                npm install

            # Iniciar el frontend en desarrollo
                npm run start:dev




    #Para producción:
        --Iniciar el backend: Este comando iniciará el servidor en modo producción y cargará el archivo .env.production.
            # Instalar dependencias
                npm install

            # Iniciar el backend en producción
                npm start

        --Construir el frontend: Esto compilará la aplicación Angular y colocará los archivos generados en la carpeta dist/my-home-stock.
            # Instalar dependencias
                npm install

            # Construir el frontend
                npm run build -- --configuration production

            # Iniciar el servidor frontend para servir archivos estáticos
                npm start


##Pasos: Ejecutar en desarrollo y producción desde el archivo principal:

    #Para Desarrollo:
        --Para iniciar el backend y frontend en modo desarrollo desde el archivo principal:
            npm run start:dev

    #Para Producción:
        --Para iniciar el backend y frontend en modo producción desde el archivo principal:
            npm start

    #Para Depuración:
        --Para depurar el backend:
            npm run debug-api

        --Para depurar el frontend:
            npm run debug-frontend





##git
    cd /ruta/a/tu/repositorio
    git log --oneline
    git checkout main
    git checkout master
    git checkout -b nombre-de-la-nueva-rama [commit-hash]
    git checkout [commit-hash]

    cd /ruta/a/tu/repositorio
    git checkout 1234567   # Cambia '1234567' por el hash del commit
    # Si quieres crear una nueva rama:
    git checkout -b mi-nueva-rama 1234567
    # Para volver a la rama principal:
    git checkout main

    git log --oneline
    git log -n 10
    git log --graph --oneline --all
    git log --author="Nombre del autor"
    git log --since="2023-01-01" --until="2023-12-31"

## volver a un commit concreto
    git status
    git reset --hard COMMIT_HASH >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   git reset --hard 10432a0

## Reiniciar dependencias
    rm -rf node_modules package-lock.json
    npm install


## Yarn es una herramienta de gestión de dependencias similar a npm, pero en algunas situaciones puede manejar las dependencias de manera más eficiente.
    npm install -g yarn
    yarn install

    cd path/to/your/angular/project
    rm -rf node_modules
    rm yarn.lock
    yarn cache clean
    yarn install
    ng build --configuration production

    yarn add madge --dev
    npx madge --circular src/
    node --max-old-space-size=8192 ./node_modules/.bin/ng serve

